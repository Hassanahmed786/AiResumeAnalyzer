import jsPDF from 'jspdf';

export const generatePDFReport = (data: any, fileName: string) => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.width;
  const pageHeight = pdf.internal.pageSize.height;
  const margin = 20;
  let yPosition = margin;

  // Helper function to add text with word wrapping
  const addWrappedText = (text: string, x: number, y: number, maxWidth: number, fontSize: number = 12) => {
    pdf.setFontSize(fontSize);
    const lines = pdf.splitTextToSize(text, maxWidth);
    pdf.text(lines, x, y);
    return y + (lines.length * fontSize * 0.4);
  };

  // Header
  pdf.setFillColor(37, 99, 235);
  pdf.rect(0, 0, pageWidth, 40, 'F');
  
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(20);
  pdf.text('Resume Helper', margin, 25);
  pdf.setFontSize(12);
  pdf.text('Free Resume Analysis Report', margin, 35);

  yPosition = 60;
  pdf.setTextColor(0, 0, 0);

  // File information
  pdf.setFontSize(14);
  pdf.text(`Resume Analysis Report`, margin, yPosition);
  yPosition += 10;
  pdf.setFontSize(10);
  pdf.text(`File: ${fileName}`, margin, yPosition);
  pdf.text(`Generated: ${new Date().toLocaleDateString()}`, pageWidth - 60, yPosition);
  yPosition += 20;

  // Overall Score
  pdf.setFontSize(16);
  pdf.text('Overall Score', margin, yPosition);
  yPosition += 10;
  
  pdf.setFontSize(24);
  pdf.setTextColor(data.overallScore >= 80 ? 34 : data.overallScore >= 60 ? 245 : 239, 
                  data.overallScore >= 80 ? 197 : data.overallScore >= 60 ? 158 : 68, 
                  data.overallScore >= 80 ? 94 : data.overallScore >= 60 ? 11 : 68);
  pdf.text(`${data.overallScore}%`, margin, yPosition);
  pdf.setTextColor(0, 0, 0);
  yPosition += 15;

  // Score message
  pdf.setFontSize(12);
  const scoreMessage = data.overallScore >= 80 ? 'Great job! Your resume looks strong.' :
                      data.overallScore >= 60 ? 'Good start! A few improvements will make it even better.' :
                      'Your resume needs some work, but we can help you fix it!';
  pdf.text(scoreMessage, margin, yPosition);
  yPosition += 20;

  // Score Breakdown
  pdf.setFontSize(14);
  pdf.text('Score Breakdown', margin, yPosition);
  yPosition += 10;
  
  pdf.setFontSize(12);
  pdf.text(`Content Quality: ${data.scores.content}%`, margin, yPosition);
  yPosition += 8;
  pdf.text(`ATS Compatibility: ${data.scores.ats}%`, margin, yPosition);
  yPosition += 8;
  pdf.text(`Formatting: ${data.scores.formatting}%`, margin, yPosition);
  yPosition += 20;

  // What's Working Well
  pdf.setFontSize(14);
  pdf.text('What\'s Working Well', margin, yPosition);
  yPosition += 10;
  
  pdf.setFontSize(10);
  data.strengths.forEach((strength: string, index: number) => {
    yPosition = addWrappedText(`‚Ä¢ ${strength}`, margin, yPosition, pageWidth - 2 * margin, 10);
    yPosition += 5;
  });
  yPosition += 10;

  // Areas to Improve
  pdf.setFontSize(14);
  pdf.text('Areas to Improve', margin, yPosition);
  yPosition += 10;
  
  pdf.setFontSize(10);
  data.improvements.forEach((improvement: string, index: number) => {
    yPosition = addWrappedText(`‚Ä¢ ${improvement}`, margin, yPosition, pageWidth - 2 * margin, 10);
    yPosition += 5;
  });
  yPosition += 10;

  // Check if we need a new page
  if (yPosition > pageHeight - 60) {
    pdf.addPage();
    yPosition = margin;
  }

  // Top Recommendations
  pdf.setFontSize(14);
  pdf.text('Top Recommendations', margin, yPosition);
  yPosition += 10;

  data.recommendations.forEach((rec: any, index: number) => {
    if (yPosition > pageHeight - 80) {
      pdf.addPage();
      yPosition = margin;
    }

    pdf.setFontSize(12);
    pdf.text(`${index + 1}. ${rec.title} (${rec.priority} Priority)`, margin, yPosition);
    yPosition += 8;
    
    pdf.setFontSize(10);
    yPosition = addWrappedText(rec.description, margin + 5, yPosition, pageWidth - 2 * margin - 5, 10);
    yPosition += 5;
    yPosition = addWrappedText(`üí° ${rec.impact}`, margin + 5, yPosition, pageWidth - 2 * margin - 5, 10);
    yPosition += 15;
  });

  // Footer
  const footerY = pageHeight - 20;
  pdf.setFontSize(8);
  pdf.setTextColor(128, 128, 128);
  pdf.text('Generated by Resume Helper - Free for Students', margin, footerY);
  pdf.text('Made with ‚ù§Ô∏è for students', pageWidth - 60, footerY);

  // Save the PDF
  pdf.save(`resume-analysis-${fileName.replace(/\.[^/.]+$/, '')}.pdf`);
};